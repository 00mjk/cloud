// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/device-directory/service.proto

package device_directory

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("pb/device-directory/service.proto", fileDescriptor_381435165b454caf) }

var fileDescriptor_381435165b454caf = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x8f, 0x3f, 0x0b, 0xc2, 0x30,
	0x10, 0xc5, 0x75, 0x71, 0xc8, 0x22, 0x74, 0x2c, 0x38, 0x28, 0x38, 0xe6, 0x52, 0x74, 0x74, 0x93,
	0x82, 0xab, 0x28, 0x2e, 0x8e, 0x49, 0x2f, 0x35, 0xa0, 0x5c, 0x9b, 0x3f, 0x82, 0xe0, 0x87, 0x17,
	0x13, 0x54, 0x2a, 0xa2, 0x83, 0xdb, 0xdd, 0xe3, 0xf7, 0x1e, 0xef, 0xb1, 0x71, 0x23, 0x45, 0x85,
	0x67, 0xa3, 0x90, 0x57, 0xc6, 0xa2, 0xf2, 0x64, 0x2f, 0xc2, 0xa1, 0xbd, 0x2b, 0xd0, 0x58, 0xf2,
	0x94, 0x8d, 0x48, 0x69, 0x50, 0x47, 0x0a, 0x15, 0x24, 0x12, 0x9e, 0x24, 0x34, 0x32, 0xe7, 0xb5,
	0xf1, 0x87, 0x20, 0x41, 0xd1, 0x49, 0xd4, 0x54, 0x93, 0x88, 0x2e, 0x19, 0x74, 0xfc, 0xe2, 0x13,
	0xaf, 0x94, 0x96, 0xaf, 0x3b, 0x38, 0x27, 0xa5, 0x05, 0x29, 0xcd, 0x63, 0xbe, 0xb0, 0xe8, 0x28,
	0xd8, 0x4e, 0x97, 0x4f, 0xfd, 0xda, 0x80, 0xd6, 0xa0, 0x4b, 0x89, 0xb3, 0x2b, 0x1b, 0x96, 0x91,
	0x28, 0x1f, 0x40, 0x66, 0x18, 0x5b, 0xa1, 0x4f, 0xaa, 0xcb, 0x0a, 0xf8, 0xba, 0x00, 0x5e, 0xe8,
	0x06, 0xdb, 0x80, 0xce, 0xe7, 0xd3, 0x1f, 0x8e, 0x84, 0x4f, 0x7a, 0x45, 0x7f, 0xb9, 0xdb, 0x6f,
	0xff, 0x5f, 0xb4, 0x78, 0x17, 0xe4, 0x20, 0x6e, 0x9b, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x46,
	0xbd, 0x73, 0x3f, 0xa0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceDirectoryClient is the client API for DeviceDirectory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceDirectoryClient interface {
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (DeviceDirectory_GetDevicesClient, error)
}

type deviceDirectoryClient struct {
	cc *grpc.ClientConn
}

func NewDeviceDirectoryClient(cc *grpc.ClientConn) DeviceDirectoryClient {
	return &deviceDirectoryClient{cc}
}

func (c *deviceDirectoryClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (DeviceDirectory_GetDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceDirectory_serviceDesc.Streams[0], "/ocf.cloud.device.directory.pb.DeviceDirectory/GetDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceDirectoryGetDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceDirectory_GetDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type deviceDirectoryGetDevicesClient struct {
	grpc.ClientStream
}

func (x *deviceDirectoryGetDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceDirectoryServer is the server API for DeviceDirectory service.
type DeviceDirectoryServer interface {
	GetDevices(*GetDevicesRequest, DeviceDirectory_GetDevicesServer) error
}

// UnimplementedDeviceDirectoryServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceDirectoryServer struct {
}

func (*UnimplementedDeviceDirectoryServer) GetDevices(req *GetDevicesRequest, srv DeviceDirectory_GetDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}

func RegisterDeviceDirectoryServer(s *grpc.Server, srv DeviceDirectoryServer) {
	s.RegisterService(&_DeviceDirectory_serviceDesc, srv)
}

func _DeviceDirectory_GetDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceDirectoryServer).GetDevices(m, &deviceDirectoryGetDevicesServer{stream})
}

type DeviceDirectory_GetDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type deviceDirectoryGetDevicesServer struct {
	grpc.ServerStream
}

func (x *deviceDirectoryGetDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

var _DeviceDirectory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ocf.cloud.device.directory.pb.DeviceDirectory",
	HandlerType: (*DeviceDirectoryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDevices",
			Handler:       _DeviceDirectory_GetDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/device-directory/service.proto",
}

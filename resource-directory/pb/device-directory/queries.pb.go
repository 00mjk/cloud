// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/device-directory/queries.proto

package device_directory

import (
	fmt "fmt"
	pb "github.com/go-ocf/cloud/resource-aggregate/pb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_ONLINE  Status = 0
	Status_OFFLINE Status = 1
)

var Status_name = map[int32]string{
	0: "ONLINE",
	1: "OFFLINE",
}

var Status_value = map[string]int32{
	"ONLINE":  0,
	"OFFLINE": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_26681580767e0867, []int{0}
}

type GetDevicesRequest struct {
	AuthorizationContext *pb.AuthorizationContext `protobuf:"bytes,1,opt,name=authorization_context,json=authorizationContext,proto3" json:"authorization_context,omitempty"`
	TypeFilter           []string                 `protobuf:"bytes,2,rep,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
	StatusFilter         []Status                 `protobuf:"varint,3,rep,packed,name=status_filter,json=statusFilter,proto3,enum=ocf.cloud.device.directory.pb.Status" json:"status_filter,omitempty"`
	DeviceIdsFilter      []string                 `protobuf:"bytes,4,rep,name=device_ids_filter,json=deviceIdsFilter,proto3" json:"device_ids_filter,omitempty"`
}

func (m *GetDevicesRequest) Reset()         { *m = GetDevicesRequest{} }
func (m *GetDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetDevicesRequest) ProtoMessage()    {}
func (*GetDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_26681580767e0867, []int{0}
}
func (m *GetDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDevicesRequest.Merge(m, src)
}
func (m *GetDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDevicesRequest proto.InternalMessageInfo

func (m *GetDevicesRequest) GetAuthorizationContext() *pb.AuthorizationContext {
	if m != nil {
		return m.AuthorizationContext
	}
	return nil
}

func (m *GetDevicesRequest) GetTypeFilter() []string {
	if m != nil {
		return m.TypeFilter
	}
	return nil
}

func (m *GetDevicesRequest) GetStatusFilter() []Status {
	if m != nil {
		return m.StatusFilter
	}
	return nil
}

func (m *GetDevicesRequest) GetDeviceIdsFilter() []string {
	if m != nil {
		return m.DeviceIdsFilter
	}
	return nil
}

type LocalizedString struct {
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (m *LocalizedString) Reset()         { *m = LocalizedString{} }
func (m *LocalizedString) String() string { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()    {}
func (*LocalizedString) Descriptor() ([]byte, []int) {
	return fileDescriptor_26681580767e0867, []int{1}
}
func (m *LocalizedString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalizedString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalizedString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalizedString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalizedString.Merge(m, src)
}
func (m *LocalizedString) XXX_Size() int {
	return m.Size()
}
func (m *LocalizedString) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalizedString.DiscardUnknown(m)
}

var xxx_messageInfo_LocalizedString proto.InternalMessageInfo

func (m *LocalizedString) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *LocalizedString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Resource struct {
	ResourceTypes    []string           `protobuf:"bytes,1,rep,name=resource_types,json=resourceTypes,proto3" json:"rt"`
	Name             string             `protobuf:"bytes,2,opt,name=name,proto3" json:"n"`
	ManufacturerName []*LocalizedString `protobuf:"bytes,3,rep,name=manufacturer_name,json=manufacturerName,proto3" json:"dmn"`
	ModelNumber      string             `protobuf:"bytes,4,opt,name=model_number,json=modelNumber,proto3" json:"dmno"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_26681580767e0867, []int{2}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetManufacturerName() []*LocalizedString {
	if m != nil {
		return m.ManufacturerName
	}
	return nil
}

func (m *Resource) GetModelNumber() string {
	if m != nil {
		return m.ModelNumber
	}
	return ""
}

type Device struct {
	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resource *Resource `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	IsOnline bool      `protobuf:"varint,3,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_26681580767e0867, []int{3}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Device) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func init() {
	proto.RegisterEnum("ocf.cloud.device.directory.pb.Status", Status_name, Status_value)
	proto.RegisterType((*GetDevicesRequest)(nil), "ocf.cloud.device.directory.pb.GetDevicesRequest")
	proto.RegisterType((*LocalizedString)(nil), "ocf.cloud.device.directory.pb.LocalizedString")
	proto.RegisterType((*Resource)(nil), "ocf.cloud.device.directory.pb.Resource")
	proto.RegisterType((*Device)(nil), "ocf.cloud.device.directory.pb.Device")
}

func init() { proto.RegisterFile("pb/device-directory/queries.proto", fileDescriptor_26681580767e0867) }

var fileDescriptor_26681580767e0867 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6b, 0xdb, 0x3e,
	0x18, 0x8e, 0x93, 0x36, 0x4d, 0x94, 0xfe, 0x15, 0xbf, 0x1f, 0x64, 0x1d, 0x8b, 0xdb, 0xc0, 0x58,
	0xe8, 0x88, 0x0d, 0xd9, 0x6e, 0xbb, 0x6c, 0xe9, 0xd6, 0xd1, 0x51, 0x52, 0x50, 0x77, 0x1a, 0x03,
	0x23, 0x4b, 0x8a, 0x2b, 0xb0, 0xa5, 0x54, 0x96, 0xca, 0xda, 0x4f, 0xb1, 0xdb, 0xbe, 0xd2, 0x8e,
	0x3d, 0xee, 0x14, 0x46, 0x73, 0x18, 0xe4, 0x53, 0x0c, 0xcb, 0xb1, 0xdb, 0x95, 0xb2, 0xee, 0x64,
	0xbf, 0xcf, 0xfb, 0xbc, 0x7f, 0x9e, 0x07, 0xbd, 0x60, 0x77, 0x12, 0xfa, 0x94, 0x9d, 0x73, 0xc2,
	0xfa, 0x94, 0x2b, 0x46, 0xb4, 0x54, 0x17, 0xfe, 0x99, 0x61, 0x8a, 0xb3, 0xd4, 0x9b, 0x28, 0xa9,
	0x25, 0x7c, 0x22, 0xc9, 0xd8, 0x23, 0xb1, 0x34, 0xd4, 0xcb, 0x99, 0x5e, 0xc9, 0xf4, 0x26, 0xe1,
	0xf6, 0xeb, 0x88, 0xeb, 0x53, 0x13, 0x7a, 0x44, 0x26, 0x7e, 0x24, 0xfb, 0x92, 0x8c, 0x7d, 0x49,
	0xc6, 0x7d, 0x5b, 0xe0, 0x2b, 0x96, 0x4a, 0xa3, 0x08, 0xeb, 0xe3, 0x28, 0x52, 0x2c, 0xc2, 0x9a,
	0xf9, 0x93, 0xd0, 0x27, 0x32, 0x49, 0xb0, 0xa0, 0x8b, 0x01, 0xdb, 0xfd, 0x3f, 0x3a, 0x44, 0xd2,
	0xb7, 0x70, 0x68, 0xc6, 0x36, 0xb2, 0x81, 0xfd, 0xcb, 0xe9, 0xdd, 0x6f, 0x55, 0xb0, 0xf5, 0x9e,
	0xe9, 0xb7, 0x76, 0x97, 0x14, 0xb1, 0x33, 0xc3, 0x52, 0x0d, 0x39, 0xf8, 0x1f, 0x1b, 0x7d, 0x2a,
	0x15, 0xbf, 0xc4, 0x9a, 0x4b, 0x11, 0x10, 0x29, 0x34, 0xfb, 0xa2, 0xdb, 0xce, 0x8e, 0xd3, 0x6b,
	0x0d, 0x5e, 0x7a, 0x37, 0x2a, 0x8a, 0xa5, 0xca, 0x9d, 0xbc, 0x49, 0xe8, 0xbd, 0xb9, 0x5d, 0xbc,
	0x9f, 0xd7, 0xa2, 0xff, 0xf0, 0x3d, 0x28, 0x74, 0x41, 0x4b, 0x5f, 0x4c, 0x58, 0x30, 0xe6, 0xb1,
	0x66, 0xaa, 0x5d, 0xdd, 0xa9, 0xf5, 0x9a, 0x08, 0x64, 0xd0, 0x81, 0x45, 0xe0, 0x07, 0xb0, 0x96,
	0x6a, 0xac, 0x4d, 0x5a, 0x50, 0x6a, 0x3b, 0xb5, 0xde, 0xfa, 0xe0, 0xa9, 0xf7, 0x57, 0x27, 0xbd,
	0x13, 0x5b, 0x83, 0x56, 0xf3, 0xda, 0x45, 0xaf, 0x3d, 0xb0, 0x95, 0x73, 0x03, 0x4e, 0xcb, 0x7e,
	0x4b, 0x76, 0xe4, 0x46, 0x9e, 0x38, 0xa4, 0x0b, 0x6e, 0xf7, 0x33, 0xd8, 0x38, 0x92, 0x04, 0xc7,
	0xfc, 0x92, 0xd1, 0x13, 0xad, 0xb8, 0x88, 0x60, 0x0f, 0x34, 0x62, 0x2c, 0x22, 0x83, 0x23, 0x66,
	0x9d, 0x68, 0x0e, 0x57, 0xe7, 0x53, 0xb7, 0xc4, 0x50, 0xf9, 0x07, 0x5d, 0xb0, 0x7c, 0x8e, 0x63,
	0xc3, 0xda, 0x55, 0x4b, 0x6b, 0xce, 0xa7, 0x6e, 0x0e, 0xa0, 0xfc, 0xd3, 0xfd, 0xe5, 0x80, 0x06,
	0x5a, 0x58, 0x07, 0xfb, 0x60, 0xbd, 0xb0, 0x31, 0xc8, 0x94, 0xa7, 0x6d, 0x27, 0xdb, 0x69, 0x58,
	0x9f, 0x4f, 0xdd, 0xaa, 0xd2, 0x68, 0xad, 0xc8, 0x7e, 0xcc, 0x92, 0xf0, 0x11, 0x58, 0x12, 0x38,
	0x29, 0x7a, 0x2f, 0xcf, 0xa7, 0xae, 0x23, 0x90, 0x85, 0x20, 0x05, 0x5b, 0x09, 0x16, 0x66, 0x8c,
	0x89, 0x36, 0x8a, 0xa9, 0xc0, 0xf2, 0x32, 0xc3, 0x5a, 0x03, 0xef, 0x01, 0xc3, 0xee, 0x88, 0x1d,
	0xae, 0xcc, 0xa7, 0x6e, 0x8d, 0x26, 0x02, 0x6d, 0xde, 0xee, 0x38, 0xca, 0xa6, 0x3c, 0x07, 0xab,
	0x89, 0xa4, 0x2c, 0x0e, 0x84, 0x49, 0x42, 0xeb, 0x60, 0xb6, 0x48, 0x63, 0x3e, 0x75, 0x97, 0x68,
	0x22, 0x24, 0x6a, 0xd9, 0xec, 0xc8, 0x26, 0xbb, 0x97, 0xa0, 0x9e, 0xbf, 0x2e, 0xb8, 0x0e, 0xaa,
	0x9c, 0xe6, 0xc6, 0xa1, 0x2a, 0xa7, 0x70, 0x1f, 0x34, 0x0a, 0x61, 0x56, 0x4b, 0x6b, 0xf0, 0xec,
	0x81, 0x1d, 0x0b, 0xc7, 0x50, 0x59, 0x08, 0x1f, 0x83, 0x26, 0x4f, 0x03, 0x29, 0x62, 0x2e, 0x32,
	0xa5, 0x4e, 0xaf, 0x81, 0x1a, 0x3c, 0x3d, 0xb6, 0xf1, 0xde, 0x2e, 0xa8, 0xe7, 0xef, 0x00, 0x02,
	0x50, 0x3f, 0x1e, 0x1d, 0x1d, 0x8e, 0xde, 0x6d, 0x56, 0x60, 0x0b, 0xac, 0x1c, 0x1f, 0x1c, 0xd8,
	0xc0, 0x19, 0x26, 0xdf, 0xaf, 0x3b, 0xce, 0xd5, 0x75, 0xc7, 0xf9, 0x79, 0xdd, 0x71, 0xbe, 0xce,
	0x3a, 0x95, 0xab, 0x59, 0xa7, 0xf2, 0x63, 0xd6, 0xa9, 0x7c, 0x3a, 0xf9, 0xa7, 0x5b, 0xbc, 0x39,
	0xf4, 0x7b, 0x8e, 0xff, 0xd5, 0x5d, 0x20, 0xac, 0xdb, 0xb3, 0x7b, 0xf1, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x9f, 0x4c, 0x9b, 0xa4, 0x2b, 0x04, 0x00, 0x00,
}

func (m *GetDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIdsFilter) > 0 {
		for iNdEx := len(m.DeviceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIdsFilter[iNdEx])
			copy(dAtA[i:], m.DeviceIdsFilter[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.DeviceIdsFilter[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StatusFilter) > 0 {
		dAtA2 := make([]byte, len(m.StatusFilter)*10)
		var j1 int
		for _, num := range m.StatusFilter {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQueries(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TypeFilter) > 0 {
		for iNdEx := len(m.TypeFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeFilter[iNdEx])
			copy(dAtA[i:], m.TypeFilter[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.TypeFilter[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AuthorizationContext != nil {
		{
			size, err := m.AuthorizationContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueries(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LocalizedString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalizedString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalizedString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModelNumber) > 0 {
		i -= len(m.ModelNumber)
		copy(dAtA[i:], m.ModelNumber)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.ModelNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ManufacturerName) > 0 {
		for iNdEx := len(m.ManufacturerName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManufacturerName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueries(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceTypes) > 0 {
		for iNdEx := len(m.ResourceTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResourceTypes[iNdEx])
			copy(dAtA[i:], m.ResourceTypes[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.ResourceTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueries(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueries(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueries(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorizationContext != nil {
		l = m.AuthorizationContext.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.TypeFilter) > 0 {
		for _, s := range m.TypeFilter {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	if len(m.StatusFilter) > 0 {
		l = 0
		for _, e := range m.StatusFilter {
			l += sovQueries(uint64(e))
		}
		n += 1 + sovQueries(uint64(l)) + l
	}
	if len(m.DeviceIdsFilter) > 0 {
		for _, s := range m.DeviceIdsFilter {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	return n
}

func (m *LocalizedString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceTypes) > 0 {
		for _, s := range m.ResourceTypes {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.ManufacturerName) > 0 {
		for _, e := range m.ManufacturerName {
			l = e.Size()
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	l = len(m.ModelNumber)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	if m.IsOnline {
		n += 2
	}
	return n
}

func sovQueries(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueries(x uint64) (n int) {
	return sovQueries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationContext == nil {
				m.AuthorizationContext = &pb.AuthorizationContext{}
			}
			if err := m.AuthorizationContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeFilter = append(m.TypeFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v Status
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueries
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StatusFilter = append(m.StatusFilter, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQueries
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQueries
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQueries
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.StatusFilter) == 0 {
					m.StatusFilter = make([]Status, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Status
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQueries
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Status(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StatusFilter = append(m.StatusFilter, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIdsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIdsFilter = append(m.DeviceIdsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalizedString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalizedString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalizedString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceTypes = append(m.ResourceTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturerName = append(m.ManufacturerName, &LocalizedString{})
			if err := m.ManufacturerName[len(m.ManufacturerName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &Resource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueries
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueries
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueries
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueries        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueries          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueries = fmt.Errorf("proto: unexpected end of group")
)

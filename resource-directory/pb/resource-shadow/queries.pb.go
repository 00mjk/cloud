// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/resource-shadow/queries.proto

package resource_shadow

import (
	fmt "fmt"
	pb "github.com/go-ocf/cloud/resource-aggregate/pb"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RetrieveResourcesValuesRequest struct {
	AuthorizationContext *pb.AuthorizationContext `protobuf:"bytes,1,opt,name=authorization_context,json=authorizationContext,proto3" json:"authorization_context,omitempty"`
	ResourceIdsFilter    []string                 `protobuf:"bytes,2,rep,name=resource_ids_filter,json=resourceIdsFilter,proto3" json:"resource_ids_filter,omitempty"`
	DeviceIdsFilter      []string                 `protobuf:"bytes,3,rep,name=device_ids_filter,json=deviceIdsFilter,proto3" json:"device_ids_filter,omitempty"`
	TypeFilter           []string                 `protobuf:"bytes,4,rep,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
}

func (m *RetrieveResourcesValuesRequest) Reset()         { *m = RetrieveResourcesValuesRequest{} }
func (m *RetrieveResourcesValuesRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveResourcesValuesRequest) ProtoMessage()    {}
func (*RetrieveResourcesValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74bd43318fcf3a1f, []int{0}
}
func (m *RetrieveResourcesValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveResourcesValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveResourcesValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveResourcesValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveResourcesValuesRequest.Merge(m, src)
}
func (m *RetrieveResourcesValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveResourcesValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveResourcesValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveResourcesValuesRequest proto.InternalMessageInfo

func (m *RetrieveResourcesValuesRequest) GetAuthorizationContext() *pb.AuthorizationContext {
	if m != nil {
		return m.AuthorizationContext
	}
	return nil
}

func (m *RetrieveResourcesValuesRequest) GetResourceIdsFilter() []string {
	if m != nil {
		return m.ResourceIdsFilter
	}
	return nil
}

func (m *RetrieveResourcesValuesRequest) GetDeviceIdsFilter() []string {
	if m != nil {
		return m.DeviceIdsFilter
	}
	return nil
}

func (m *RetrieveResourcesValuesRequest) GetTypeFilter() []string {
	if m != nil {
		return m.TypeFilter
	}
	return nil
}

type ResourceValue struct {
	ResourceId string      `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	DeviceId   string      `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Href       string      `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty"`
	Types      []string    `protobuf:"bytes,4,rep,name=types,proto3" json:"types,omitempty"`
	Content    *pb.Content `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Status     pb.Status   `protobuf:"varint,6,opt,name=status,proto3,enum=ocf.cloud.resourceaggregate.pb.Status" json:"status,omitempty"`
}

func (m *ResourceValue) Reset()         { *m = ResourceValue{} }
func (m *ResourceValue) String() string { return proto.CompactTextString(m) }
func (*ResourceValue) ProtoMessage()    {}
func (*ResourceValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_74bd43318fcf3a1f, []int{1}
}
func (m *ResourceValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceValue.Merge(m, src)
}
func (m *ResourceValue) XXX_Size() int {
	return m.Size()
}
func (m *ResourceValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceValue.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceValue proto.InternalMessageInfo

func (m *ResourceValue) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ResourceValue) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ResourceValue) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ResourceValue) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ResourceValue) GetContent() *pb.Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ResourceValue) GetStatus() pb.Status {
	if m != nil {
		return m.Status
	}
	return pb.Status_UNKNOWN
}

func init() {
	proto.RegisterType((*RetrieveResourcesValuesRequest)(nil), "ocf.cloud.resource.shadow.pb.RetrieveResourcesValuesRequest")
	proto.RegisterType((*ResourceValue)(nil), "ocf.cloud.resource.shadow.pb.ResourceValue")
}

func init() { proto.RegisterFile("pb/resource-shadow/queries.proto", fileDescriptor_74bd43318fcf3a1f) }

var fileDescriptor_74bd43318fcf3a1f = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x8b, 0xd3, 0x40,
	0x1c, 0xc6, 0x9b, 0x76, 0xb7, 0xda, 0x59, 0x54, 0x76, 0x5c, 0x21, 0xac, 0x12, 0xc3, 0x1e, 0xb4,
	0x08, 0x3b, 0x81, 0xd5, 0x9b, 0x2f, 0xb0, 0x2e, 0x08, 0x1e, 0xbc, 0x8c, 0xe0, 0xc1, 0x4b, 0x99,
	0x4c, 0xfe, 0x49, 0x06, 0xda, 0x4c, 0x76, 0x5e, 0xaa, 0xf5, 0x13, 0x78, 0xf4, 0x63, 0x79, 0xec,
	0xd1, 0xa3, 0xb4, 0xdf, 0xc2, 0x93, 0x74, 0x92, 0x69, 0xab, 0x15, 0x8a, 0xb7, 0xcc, 0xfc, 0x7f,
	0xcf, 0xf3, 0xcc, 0x3c, 0x4c, 0x50, 0x5c, 0xa7, 0x89, 0x02, 0x2d, 0xad, 0xe2, 0x70, 0xae, 0x4b,
	0x96, 0xc9, 0x4f, 0xc9, 0xb5, 0x05, 0x25, 0x40, 0x93, 0x5a, 0x49, 0x23, 0xf1, 0x03, 0xc9, 0x73,
	0xc2, 0xc7, 0xd2, 0x66, 0xc4, 0x83, 0xa4, 0x01, 0x49, 0x9d, 0x9e, 0xbe, 0x2c, 0x84, 0x29, 0x6d,
	0x4a, 0xb8, 0x9c, 0x24, 0x85, 0x3c, 0x97, 0x3c, 0x4f, 0x1c, 0xbb, 0x31, 0x65, 0x45, 0xa1, 0xa0,
	0x60, 0x06, 0x92, 0xad, 0xa8, 0xd6, 0xfc, 0xf4, 0xc5, 0xff, 0xc9, 0xb9, 0x9c, 0x4c, 0x58, 0x95,
	0xb5, 0xea, 0xb3, 0xaf, 0x5d, 0x14, 0x51, 0x30, 0x4a, 0xc0, 0x14, 0xa8, 0x77, 0xfe, 0xc0, 0xc6,
	0x16, 0x34, 0x85, 0x6b, 0x0b, 0xda, 0x60, 0x81, 0xee, 0x31, 0x6b, 0x4a, 0xa9, 0xc4, 0x17, 0x66,
	0x84, 0xac, 0x46, 0x5c, 0x56, 0x06, 0x3e, 0x9b, 0x30, 0x88, 0x83, 0xe1, 0xd1, 0xc5, 0x33, 0xb2,
	0x7b, 0xbb, 0x75, 0x22, 0xa9, 0x53, 0x72, 0xb9, 0x2d, 0xbe, 0x6a, 0xb4, 0xf4, 0x84, 0xfd, 0x63,
	0x17, 0x13, 0x74, 0xd7, 0x5b, 0x8c, 0x44, 0xa6, 0x47, 0xb9, 0x18, 0x1b, 0x50, 0x61, 0x37, 0xee,
	0x0d, 0x07, 0xf4, 0xd8, 0x8f, 0xde, 0x66, 0xfa, 0x8d, 0x1b, 0xe0, 0x27, 0xe8, 0x38, 0x83, 0xa9,
	0xf8, 0x93, 0xee, 0x39, 0xfa, 0x4e, 0x33, 0xd8, 0xb0, 0x0f, 0xd1, 0x91, 0x99, 0xd5, 0xe0, 0xa9,
	0x03, 0x47, 0xa1, 0xd5, 0x56, 0x03, 0x9c, 0xfd, 0x0a, 0xd0, 0x2d, 0x5f, 0x81, 0x6b, 0x60, 0x25,
	0xd9, 0x3a, 0x8e, 0xbb, 0xef, 0x80, 0xa2, 0xcd, 0x31, 0xf0, 0x7d, 0x34, 0x58, 0xe7, 0x87, 0x5d,
	0x37, 0xbe, 0xe9, 0x73, 0x31, 0x46, 0x07, 0xa5, 0x82, 0x3c, 0xec, 0xb9, 0x7d, 0xf7, 0x8d, 0x4f,
	0xd0, 0xe1, 0x2a, 0x51, 0xb7, 0xf1, 0xcd, 0x02, 0x5f, 0xa2, 0x1b, 0xae, 0xd3, 0xca, 0x84, 0x87,
	0xae, 0xd3, 0xc7, 0xfb, 0x3a, 0xbd, 0x6a, 0x70, 0xea, 0x75, 0xf8, 0x15, 0xea, 0x6b, 0xc3, 0x8c,
	0xd5, 0x61, 0x3f, 0x0e, 0x86, 0xb7, 0x2f, 0x1e, 0xed, 0x73, 0x78, 0xef, 0x68, 0xda, 0xaa, 0x5e,
	0x17, 0xdf, 0x17, 0x51, 0x30, 0x5f, 0x44, 0xc1, 0xcf, 0x45, 0x14, 0x7c, 0x5b, 0x46, 0x9d, 0xf9,
	0x32, 0xea, 0xfc, 0x58, 0x46, 0x9d, 0x8f, 0xef, 0xf6, 0xbe, 0xaf, 0x4c, 0x28, 0xe0, 0x46, 0xaa,
	0x59, 0xb2, 0xfb, 0x27, 0x3c, 0xff, 0x6b, 0x9d, 0xf6, 0xdd, 0xbb, 0x7b, 0xfa, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x44, 0x74, 0x59, 0x4b, 0x36, 0x03, 0x00, 0x00,
}

func (m *RetrieveResourcesValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveResourcesValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveResourcesValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TypeFilter) > 0 {
		for iNdEx := len(m.TypeFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeFilter[iNdEx])
			copy(dAtA[i:], m.TypeFilter[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.TypeFilter[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DeviceIdsFilter) > 0 {
		for iNdEx := len(m.DeviceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIdsFilter[iNdEx])
			copy(dAtA[i:], m.DeviceIdsFilter[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.DeviceIdsFilter[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResourceIdsFilter) > 0 {
		for iNdEx := len(m.ResourceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResourceIdsFilter[iNdEx])
			copy(dAtA[i:], m.ResourceIdsFilter[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.ResourceIdsFilter[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AuthorizationContext != nil {
		{
			size, err := m.AuthorizationContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueries(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQueries(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueries(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintQueries(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Href) > 0 {
		i -= len(m.Href)
		copy(dAtA[i:], m.Href)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Href)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResourceId) > 0 {
		i -= len(m.ResourceId)
		copy(dAtA[i:], m.ResourceId)
		i = encodeVarintQueries(dAtA, i, uint64(len(m.ResourceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueries(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueries(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RetrieveResourcesValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorizationContext != nil {
		l = m.AuthorizationContext.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.ResourceIdsFilter) > 0 {
		for _, s := range m.ResourceIdsFilter {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	if len(m.DeviceIdsFilter) > 0 {
		for _, s := range m.DeviceIdsFilter {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	if len(m.TypeFilter) > 0 {
		for _, s := range m.TypeFilter {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	return n
}

func (m *ResourceValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQueries(uint64(m.Status))
	}
	return n
}

func sovQueries(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueries(x uint64) (n int) {
	return sovQueries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RetrieveResourcesValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveResourcesValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveResourcesValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationContext == nil {
				m.AuthorizationContext = &pb.AuthorizationContext{}
			}
			if err := m.AuthorizationContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceIdsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceIdsFilter = append(m.ResourceIdsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIdsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIdsFilter = append(m.DeviceIdsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeFilter = append(m.TypeFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &pb.Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= pb.Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueries
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueries
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueries
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueries        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueries          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueries = fmt.Errorf("proto: unexpected end of group")
)
